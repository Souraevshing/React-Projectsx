{"version":3,"sources":["components/Pokemongame.jsx","components/pokemonData.jsx","components/Pokecard.jsx","components/Pokedex.jsx","App.js","reportWebVitals.js","index.js"],"names":["pokemondata","id","name","type","exp","Pokemoncard","props","pokemonImg","pokemon","className","src","alt","Pokemondex","hand","map","totalExp","ar1","ar2","length","index","Math","floor","random","splice","push","console","log","pokemon1","Object","values","reduce","t","pokemon2","Pokemongame","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uIAYA,I,kDCuCeA,EAnDK,CAClB,CACEC,GAAI,EACJC,KAAM,aACNC,KAAM,OACNC,IAAK,IAEP,CACEH,GAAI,EACJC,KAAM,WACNC,KAAM,QACNC,IAAK,IAEP,CACEH,GAAI,GACJC,KAAM,UACNC,KAAM,MACNC,IAAK,IAEP,CACEH,GAAI,GACJC,KAAM,aACNC,KAAM,SACNC,IAAK,KAEP,CACEH,GAAI,GACJC,KAAM,UACNC,KAAM,WACNC,IAAK,KAEP,CACEH,GAAI,GACJC,KAAM,aACNC,KAAM,SACNC,IAAK,IAEP,CACEH,GAAI,GACJC,KAAM,SACNC,KAAM,SACNC,IAAK,KAEP,CACEH,GAAI,IACJC,KAAM,QACNC,KAAM,SACNC,IAAK,K,OCpBMC,EAlBK,SAACC,GACnB,IAAMC,EAAU,mFAA+ED,EAAME,QAAQP,GAA7F,QAChB,OACE,sBAAKQ,UAAU,cAAf,UACE,6BAAKH,EAAME,QAAQN,OACnB,qBAAKQ,IAAKH,EAAYI,IAAI,YAC1B,gCACE,8BACE,6CADF,IAC4BL,EAAME,QAAQL,QAE1C,8BACE,2CADF,IAC0BG,EAAME,QAAQJ,cCCjCQ,EAXI,SAACN,GAClB,OACE,sBAAKG,UAAU,aAAf,UACGH,EAAMO,KAAKC,KAAI,SAACN,GAAD,OACd,cAAC,EAAD,CAAaA,QAASA,OAExB,qBAAKC,UAAU,WAAf,SAA2BH,EAAMS,eHVnCC,EAAM,GACNC,EAAG,YACFjB,GAIEgB,EAAIE,OAASD,EAAIC,QAAQ,CAC9B,IAAIC,EAAQC,KAAKC,MACfD,KAAKE,SAAWL,EAAIC,QAElBI,EAASL,EAAIM,OAAOJ,EAAO,GAC/BH,EAAIQ,KAAKF,EAAO,IAGlBG,QAAQC,IAAIV,GACZS,QAAQC,IAAIT,GAOZ,IAAIU,EAAWC,OAAOC,OAAOb,GAAKc,QAAO,SAACC,EAAD,UAAgBA,EAAhB,EAAM3B,MAAmB,GAC9D4B,EAAWJ,OAAOC,OAAOb,GAAKc,QAAO,SAACC,EAAD,UAAgBA,EAAhB,EAAM3B,MAAmB,GA2BnD6B,EAnBK,WAClB,OACE,sBAAKxB,UAAU,qBAAf,UACGkB,EAAWK,EACV,oBAAIvB,UAAU,SAAd,oBAEA,oBAAIA,UAAU,QAAd,mBAEF,cAAC,EAAD,CAAYI,KAAMG,EAAKD,SAAUY,IAChCA,EAAWK,EACV,oBAAIvB,UAAU,QAAd,mBAEA,oBAAIA,UAAU,SAAd,oBAEF,cAAC,EAAD,CAAYI,KAAMI,EAAKF,SAAUiB,QI7CxBE,G,MAFH,kBAAM,cAAC,EAAD,MCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.38a620b9.chunk.js","sourcesContent":["//importing necessary dependencies\n\nimport React from 'react'\nimport pokemondata from './pokemonData'\nimport Pokemondex from './Pokedex'\n\nlet ar1 = [] //creating empty array to store pokemon data\nlet ar2 = [\n  ...pokemondata,\n] /**three dots(...) is called spread operator and is used to copy all elements of one array to this array.*/\n\n/**Iterating over arrays until both arrays are equal*/\nwhile (ar1.length < ar2.length) {\n  let index = Math.floor(\n    Math.random() * ar2.length\n  ) /**Generating a random no btw array1 & array2 */\n  let random = ar2.splice(index, 1) /**taking one pokemon data one at a time */\n  ar1.push(random[0]) /**adding objects to the array */\n}\n\nconsole.log(ar1)\nconsole.log(ar2)\n\n/**Object.values returns values of all elements\n * reduce() method executes the expr and returned to the callback function.\n * Here t is variable and summing exp value to t; initialising t = 0\n */\n\nlet pokemon1 = Object.values(ar1).reduce((t, { exp }) => t + exp, 0)\nlet pokemon2 = Object.values(ar1).reduce((t, { exp }) => t + exp, 0)\n\n/**creating data, checking if exp value of pokemon1 is greater than pokemon2 or vice\n * versa.\n * Ternary Operator ( ? : ) is used here for conditional-rendering and returning to\n * app.js\n */\n\nconst Pokemongame = () => {\n  return (\n    <div className='pokegame-container'>\n      {pokemon1 > pokemon2 ? (\n        <h1 className='winner'>WINNER</h1>\n      ) : (\n        <h1 className='loser'>LOSER</h1>\n      )}\n      <Pokemondex hand={ar1} totalExp={pokemon1} />\n      {pokemon1 < pokemon2 ? (\n        <h1 className='loser'>LOSER</h1>\n      ) : (\n        <h1 className='winner'>WINNER</h1>\n      )}\n      <Pokemondex hand={ar2} totalExp={pokemon2} />\n    </div>\n  )\n}\n\nexport default Pokemongame\n","const pokemondata = [\n  {\n    id: 4,\n    name: 'Charmander',\n    type: 'fire',\n    exp: 62,\n  },\n  {\n    id: 7,\n    name: 'Squirtle',\n    type: 'water',\n    exp: 63,\n  },\n  {\n    id: 11,\n    name: 'Metapod',\n    type: 'bug',\n    exp: 72,\n  },\n  {\n    id: 12,\n    name: 'Butterfree',\n    type: 'flying',\n    exp: 178,\n  },\n  {\n    id: 25,\n    name: 'Pikachu',\n    type: 'electric',\n    exp: 112,\n  },\n  {\n    id: 39,\n    name: 'Jigglypuff',\n    type: 'normal',\n    exp: 95,\n  },\n  {\n    id: 94,\n    name: 'Gengar',\n    type: 'poison',\n    exp: 225,\n  },\n  {\n    id: 133,\n    name: 'Eevee',\n    type: 'normal',\n    exp: 65,\n  },\n]\n\nexport default pokemondata\n","//importing necessary dependencies\n\nimport React from 'react'\n\n/**importing pokemon image from github api.\n * props is used inside link to change the pokemon value on every\n * page re-fresh.\n */\n\nconst Pokemoncard = (props) => {\n  const pokemonImg = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${props.pokemon.id}.png`\n  return (\n    <div className='pokemonCard'>\n      <h2>{props.pokemon.name}</h2>\n      <img src={pokemonImg} alt='pokemon' />\n      <div>\n        <p>\n          <strong>Type : </strong> {props.pokemon.type}\n        </p>\n        <p>\n          <strong>XP : </strong> {props.pokemon.exp}\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Pokemoncard\n","//importing necessary dependencies\n\nimport React from 'react'\nimport Pokemoncard from './Pokecard'\n\n/**'props' is like an attribute in html and is used to fetch the data from the\n * exported jsx file.\n * 'map' is an fn used to fetch elements one by one , traversing all over the array.\n */\n\nconst Pokemondex = (props) => {\n  return (\n    <div className='pokemonDex'>\n      {props.hand.map((pokemon) => (\n        <Pokemoncard pokemon={pokemon} />\n      ))}\n      <div className='totalExp'>{props.totalExp}</div>\n    </div>\n  )\n}\n\nexport default Pokemondex\n","import React from 'react'\nimport Pokemongame from './components/Pokemongame'\nimport './App.css'\n\nconst App = () => <Pokemongame />\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}