{"version":3,"sources":["Book.js","bookData.js","Booklist.js","App.js","serviceWorker.js","index.js"],"names":["Book","Component","render","this","props","info","img","title","author","className","src","width","alt","books","id","Booklist","constructor","super","state","booksData","map","item","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LAEe,MAAMA,UAAaC,YAChCC,SAAS,QAEwBC,KAAKC,MAAMC,KAAlCC,EAFD,EAECA,IAAKC,EAFN,EAEMA,MAAOC,EAFb,EAEaA,OACpB,OACE,0BAASC,UAAU,OAAnB,UACE,qBAAKC,IAAKJ,EAAKK,MAAM,MAAMC,IAAI,SAC/B,gCACE,0CAAaL,KACb,2CAAcC,YCmCTK,MA9CD,CACZ,CACEC,GAAI,EACJR,IACE,wFACFC,MACE,mFACFC,OAAQ,iBAEV,CACEM,GAAI,EACJR,IACE,wFACFC,MAAO,0BACPC,OAAQ,eAEV,CACEM,GAAI,EACJR,IACE,wFACFC,MAAO,WACPC,OAAQ,kBAEV,CACEM,GAAI,EACJR,IACE,wFACFC,MAAO,WACPC,OAAQ,kBAEV,CACEM,GAAI,EACJR,IACE,wFACFC,MAAO,WACPC,OAAQ,kBAEV,CACEM,GAAI,EACJR,IACE,wFACFC,MAAO,WACPC,OAAQ,mBCvCG,MAAMO,UAAiBd,YACpCe,YAAYZ,GACVa,MAAMb,GACND,KAAKe,MAAQ,CACXL,MAAOM,GAMXjB,SACE,OACE,oCACE,sDACCC,KAAKe,MAAML,MAAMO,KAAIC,GACpB,cAAC,EAAD,CAAoBhB,KAAMgB,GAAfA,EAAKP,U,MCNXQ,MANH,IACV,kCACE,cAAC,EAAD,MCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS1B,OAAO,cAAC,EAAD,IAAS2B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAKC,IACjCA,EAAaC,iB","file":"static/js/main.f684d465.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Book extends Component {\n  render() {\n    // console.log(this.props);\n    const { img, title, author } = this.props.info\n    return (\n      <article className='book'>\n        <img src={img} width='150' alt='book' />\n        <div>\n          <h4>Title : {title}</h4>\n          <h6>Author : {author}</h6>\n        </div>\n      </article>\n    )\n  }\n}\n","const books = [\n  {\n    id: 1,\n    img:\n      \"https://images-na.ssl-images-amazon.com/images/I/91ILDdvFJ4L._AC_UL200_SR200,200_.jpg\",\n    title:\n      \"Girl, Stop Apologizing: A Shame-Free Plan for Embracing and Achieving Your Goals\",\n    author: \"Rachel Hollis\"\n  },\n  {\n    id: 2,\n    img:\n      \"https://images-na.ssl-images-amazon.com/images/I/81WWiiLgEyL._AC_UL200_SR200,200_.jpg\",\n    title: \"Where the Crawdads Sing\",\n    author: \"Delia Owens\"\n  },\n  {\n    id: 3,\n    img:\n      \"https://images-na.ssl-images-amazon.com/images/I/81h2gWPTYJL._AC_UL200_SR200,200_.jpg\",\n    title: \"Becoming\",\n    author: \"Michelle Obama\"\n  },\n  {\n    id: 4,\n    img:\n      \"https://images-na.ssl-images-amazon.com/images/I/81h2gWPTYJL._AC_UL200_SR200,200_.jpg\",\n    title: \"Becoming\",\n    author: \"Michelle Obama\"\n  },\n  {\n    id: 5,\n    img:\n      \"https://images-na.ssl-images-amazon.com/images/I/81h2gWPTYJL._AC_UL200_SR200,200_.jpg\",\n    title: \"Becoming\",\n    author: \"Michelle Obama\"\n  },\n  {\n    id: 6,\n    img:\n      \"https://images-na.ssl-images-amazon.com/images/I/81h2gWPTYJL._AC_UL200_SR200,200_.jpg\",\n    title: \"Becoming\",\n    author: \"Michelle Obama\"\n  }\n];\n\nexport default books;\n","import React, { Component } from \"react\";\nimport Book from \"./Book\";\nimport booksData from \"./bookData\";\nexport default class Booklist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: booksData\n    };\n  }\n  // state = {\n\n  // }\n  render() {\n    return (\n      <section>\n        <h3>This is our Booklist</h3>\n        {this.state.books.map(item => (\n          <Book key={item.id} info={item} />\n        ))}\n      </section>\n    );\n  }\n}\n","// state, this.setState = hold/access/change data of component\n// props = read only\n\nimport React from \"react\";\nimport Booklist from \"./Booklist\";\nimport \"./App.css\";\nconst App = () => (\n  <section>\n    <Booklist />\n  </section>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}